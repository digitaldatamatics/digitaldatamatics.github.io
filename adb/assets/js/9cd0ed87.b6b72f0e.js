"use strict";(self.webpackChunkdoc_generator=self.webpackChunkdoc_generator||[]).push([[5219],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=d(t),p=o,g=m["".concat(i,".").concat(p)]||m[p]||l[p]||a;return t?r.createElement(g,s(s({ref:n},u),{},{components:t})):r.createElement(g,s({ref:n},u))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var d=2;d<a;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4469:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return d},toc:function(){return u},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),s=["components"],c={sidebar_position:2},i="Usage",d={unversionedId:"src/utils/mongodb/docs/usage",id:"src/utils/mongodb/docs/usage",isDocsHomePage:!1,title:"Usage",description:"Import",source:"@site/docs/src/utils/mongodb/docs/usage.md",sourceDirName:"src/utils/mongodb/docs",slug:"/src/utils/mongodb/docs/usage",permalink:"/adb/docs/src/utils/mongodb/docs/usage",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/adb/docs/src/utils/mongodb/docs/setup"},next:{title:"Misc",permalink:"/adb/docs/src/utils/mongodb/docs/misc"}},u=[{value:"Import",id:"import",children:[],level:2},{value:"Pass config",id:"pass-config",children:[],level:2},{value:"Use (generic) methods",id:"use-generic-methods",children:[{value:"insertDocument",id:"insertdocument",children:[],level:3},{value:"getDocuments",id:"getdocuments",children:[],level:3},{value:"getDocumentByIds",id:"getdocumentbyids",children:[],level:3},{value:"updateDocumentById",id:"updatedocumentbyid",children:[],level:3}],level:2},{value:"Get Instance (for custom query)",id:"get-instance-for-custom-query",children:[],level:2}],l={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usage"},"Usage"),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import type * as MongodbTypes from "../mongodb.types";\n\nimport {\n    setMongodb, getMongodb, GenericMongoWrapperCls\n} from "../mongodb";\n')),(0,a.kt)("h2",{id:"pass-config"},"Pass config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'//style 1\nawait setMongodb({\n        connectionUrl:""\n    });\n\n//style 2\nawait setMongodb({\n        dbIPAddress:"",\n        dbPort:"",\n        dbName: "",\n        dbUserName:"",\n        dbPassword:"",\n    });\n')),(0,a.kt)("h2",{id:"use-generic-methods"},"Use (generic) methods"),(0,a.kt)("h3",{id:"insertdocument"},"insertDocument"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const params: MongodbTypes.IParamsInsertDocument = {\n        collectionName: "students",\n        keyName: "studentId",\n        document: {\n            "studentName": "Ryan Dahl",\n            "registrationDate": "2021-03-29T18:46:28.673Z",\n            "gradeStatus": "A",\n            "personalDetails": {\n                "fathersName": "om",\n                "age": 33\n            },\n            "aliasNames": [\n                "ry",\n                "nodeMan",\n                "denoMan"\n            ],\n            "documents": [\n                {\n                    "fileName": "pan",\n                    "fileExtension": "pdf",\n                    "filePath": "/leap/docs/{studentId}"\n                }\n            ]\n        },\n        createdBy: "user1"\n    };\n\nconst insertedId = await GenericMongoWrapperCls.insertDocument(params);\n\n')),(0,a.kt)("h3",{id:"getdocuments"},"getDocuments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const params: MongodbTypes.IParamsGetDocuments = {\n        collectionName: "students",\n        keyName: "studentId",\n        filter: { //mongodb find query syntax\n             "studentName": "Ryan Dahl",\n        },\n        projection: { //mongodb projection syntax\n            "studentId": 1,\n            "studentName": 1,\n            "personalDetails.fathersName": 1,\n            "documents.fileName": 1\n        },\n        //sort:{} //mongodb sort syntax\n    };\n\n\nconst docArr = await GenericMongoWrapperCls.getDocuments(params);\n\n/*\nOUTPUT:\n\n[{\n        studentId: "",\n        studentName: "",\n        personalDetails: {\n            fathersName: ""\n        },\n        documents: [{\n                fileName: ""\n            },\n            //... more docs\n        ]\n    },\n    //... more students\n]\n*/\n')),(0,a.kt)("h3",{id:"getdocumentbyids"},"getDocumentByIds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const params: MongodbTypes.IParamsGetDocumentByIds = {\n        collectionName: "students",\n        keyName: "studentId",\n        ids: [\n            "6140ad7b50e409cfb65fb537",\n            "6140ad7b50e409cfb65fb538"\n        ],\n        projection: {\n            "studentId": 1,\n            "studentName": 1\n        }\n    };\n\n\nconst docArr = await GenericMongoWrapperCls.getDocumentByIds(params);\n\n//OUTPUT same as getDocuments()\n')),(0,a.kt)("h3",{id:"updatedocumentbyid"},"updateDocumentById"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const params: MongodbTypes.IParamsUpdateDocumentById = {\n        collectionName: "students",\n        keyName: "studentId",\n        id: "6140ad7b50e409cfb65fb537",\n\n        document: {\n            "studentName": "Ryan Ryan",\n            "registrationDate": "1990-02-13",\n            "personalDetails": {\n                "fathersName": "shiv om",\n                "hobby": "learning" //new field\n            },\n            "aliasNames": [ //update by array position\n                "ry",\n                "postman"\n            ],\n            "documents": [ //update by array position\n                {\n                    "fileName": "pan india",\n                    "fileExtension2": "doc", //new field\n                },\n                { //new array item\n                    "fileName": "world",\n                    "fileExtension": "xls",\n                }\n            ],\n            "statusCode": 0\n        },\n        updatedBy: "user1"\n    };\n\n\nconst id = await GenericMongoWrapperCls.updateDocumentById(params);\n')),(0,a.kt)("h2",{id:"get-instance-for-custom-query"},"Get Instance (for custom query)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const mongodbWrapperInst = getMongodb();\nconst db = await mongodbWrapperInst.globalDB;\n\n//write any raw node mongo query\nawait db.dropCollection("collectionName")\n')))}m.isMDXComponent=!0}}]);