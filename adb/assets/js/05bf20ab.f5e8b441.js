"use strict";(self.webpackChunkdoc_generator=self.webpackChunkdoc_generator||[]).push([[5733],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),o=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=o(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=o(n),m=a,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var o=2;o<s;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6310:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return o},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),l=["components"],i={sidebar_position:3},c="Usage",o={unversionedId:"src/utils/server-cache/docs/usage",id:"src/utils/server-cache/docs/usage",isDocsHomePage:!1,title:"Usage",description:"Import",source:"@site/docs/src/utils/server-cache/docs/usage.md",sourceDirName:"src/utils/server-cache/docs",slug:"/src/utils/server-cache/docs/usage",permalink:"/docs/src/utils/server-cache/docs/usage",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/docs/src/utils/server-cache/docs/setup"}},u=[{value:"Import",id:"import",children:[],level:2},{value:"Pass config",id:"pass-config",children:[],level:2},{value:"Get Instance",id:"get-instance",children:[],level:2},{value:"Use methods",id:"use-methods",children:[{value:"Set Get",id:"set-get",children:[],level:3},{value:"Multiple Set Get",id:"multiple-set-get",children:[],level:3},{value:"Delete",id:"delete",children:[],level:3},{value:"Check key exists",id:"check-key-exists",children:[],level:3},{value:"expiry",id:"expiry",children:[],level:3},{value:"keys",id:"keys",children:[],level:3},{value:"custom",id:"custom",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"usage"},"Usage"),(0,s.kt)("h2",{id:"import"},"Import"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  setServerCache,\n  getServerCache,\n  ServerCacheCls,\n} from "path/to/server-cache/server-cache";\n')),(0,s.kt)("h2",{id:"pass-config"},"Pass config"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'//syntax\nsetServerCache(options);\n\n//example\nsetServerCache({\n  enableRedisCache: true, \n  redisDatabaseOptions: {\n    dbIPAddress: "127.0.0.1", \n    dbPort: 6379, \n    dbPassword: "password", \n  },\n  keyPrefix: "MyProductName", \n  keySuffix: "Test", \n});\n')),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Param"),(0,s.kt)("th",{parentName:"tr",align:null},"Type"),(0,s.kt)("th",{parentName:"tr",align:null},"Default"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"[enableRedisCache]"),(0,s.kt)("td",{parentName:"tr",align:null},"boolean"),(0,s.kt)("td",{parentName:"tr",align:null},"false"),(0,s.kt)("td",{parentName:"tr",align:null},"true to use redis as server cache")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"[redisDatabaseOptions.dbIPAddress]"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null},'"127.0.0.1"'),(0,s.kt)("td",{parentName:"tr",align:null},"redis server ip address")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"[redisDatabaseOptions.dbPort]"),(0,s.kt)("td",{parentName:"tr",align:null},"number"),(0,s.kt)("td",{parentName:"tr",align:null},"6379"),(0,s.kt)("td",{parentName:"tr",align:null},"redis server port")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"[redisDatabaseOptions.dbPassword]"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null},'""'),(0,s.kt)("td",{parentName:"tr",align:null},"redis server auth password")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"[keyPrefix]"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null},'""'),(0,s.kt)("td",{parentName:"tr",align:null},"(optional) prefix to add against each key")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"[keySuffix]"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null},'""'),(0,s.kt)("td",{parentName:"tr",align:null},"(optional) suffix to add against each key")))),(0,s.kt)("h2",{id:"get-instance"},"Get Instance"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const serverCacheInst: ServerCacheCls = getServerCache();\n")),(0,s.kt)("h2",{id:"use-methods"},"Use methods"),(0,s.kt)("p",null,"Note : Can also check unit tests for working samples (server-cache/test/server-cache.methods.ts)"),(0,s.kt)("h3",{id:"set-get"},"Set Get"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'\nconst key = "name"; //string\nconst value = "Alex"; //can be string, number, boolean, date, object, stringArray, numberArray, ObjectArray\n\nawait serverCacheInst.set(key, value);\n\nconst cacheValue = await serverCacheInst.get(_key);\n\n')),(0,s.kt)("h3",{id:"multiple-set-get"},"Multiple Set Get"),(0,s.kt)("p",null,"Sets the given values to their respective keys"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'\n//multiple set\nconst valueObj = {\n    fatherName: "Dad",\n    fatherAge: 50\n    fatherDob: new Date("1972-01-01"),\n};\nawait serverCacheInst.multipleSet(valueObj);\n\n//single get\nconst fatherName = await serverCacheInst.get("fatherName");\nconst fatherAge = await serverCacheInst.get("fatherAge");\n\n//multiple get\nconst keyObj = {\n    fatherName: 1,\n    fatherAge: 1,\n};\nconst multiValObj = await serverCacheInst.multipleGet(keyObj);\n\n\n')),(0,s.kt)("h3",{id:"delete"},"Delete"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'//single delete\nconst key = "name";\nawait serverCacheInst.delete(key);\n\n//multiple delete\nconst keyObj = {\n    fatherName: 1,\n    name: 1,\n};\n\nconst deleteCount = await serverCacheInst.multipleDelete(keyObj);\n')),(0,s.kt)("h3",{id:"check-key-exists"},"Check key exists"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'//single exists\nconst key = "name";\nconst count =  await serverCacheInst.exists(key); //count == 1\n\n//multiple exists\nconst keyObj = {\n    fatherName: 1,\n    name: 1,\n};\n\nconst keysCount = await serverCacheInst.multipleExists(keyObj); //keysCount == Object.keys(keyObj).length\n')),(0,s.kt)("h3",{id:"expiry"},"expiry"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'\nconst key = "bestInvestment";\nconst value = "learning";\nconst expireAfterSeconds = 1;\n\n//setting expiry while setting value\nawait serverCacheInst.set(key, value, expireAfterSeconds);\n\n//setting expiry later\nawait serverCacheInst.setExpiry(key, expireAfterSeconds);\n\n//check remaining expiry time\nconst remainingTime = await serverCacheInst.getExpiryRemaining(key);\n\n//remove expiry\nawait serverCacheInst.removeExpiry(key);\n\n')),(0,s.kt)("h3",{id:"keys"},"keys"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'\n//get total key count in database\nconst totalCount = await serverCacheInst.getTotalKeyCount();\n\n//get all key names\nconst totalKeysObj = await serverCacheInst.getKeyNames();\n\n//get specific key names by pattern\nconst pattern = "**user*"; //keys containing "user" word\nconst patternKeysObj = await serverCacheInst.getKeyNames(pattern);\n\n//to get values of those keys\nconst multiValObj = await serverCacheInst.multipleGet(patternKeysObj);\n\n')),(0,s.kt)("h3",{id:"custom"},"custom"),(0,s.kt)("p",null,"To use raw library methods (useful when above methods doesn't solve our requirement)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'\nimport {\n    Redis //just for types (typescript intellisense of raw ioredis)\n} from "path/to/server-cache/dependencies"; \n\n\n//@ts-ignore\nconst ioredisInstance: Redis.Redis = serverCacheInst.libInst;\n\n//can use raw ioredis methods\nawait ioredisInstance.set(key, value);\n\n')))}d.isMDXComponent=!0}}]);