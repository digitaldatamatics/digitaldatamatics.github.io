"use strict";(self.webpackChunkdoc_generator=self.webpackChunkdoc_generator||[]).push([[5821],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return D}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(n),D=o,g=u["".concat(l,".").concat(D)]||u[D]||d[D]||r;return n?a.createElement(g,i(i({ref:t},m),{},{components:n})):a.createElement(g,i({ref:t},m))}));function D(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},477:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},l="Usage",c={unversionedId:"src/utils/common-utils/docs/usage",id:"src/utils/common-utils/docs/usage",isDocsHomePage:!1,title:"Usage",description:"Import",source:"@site/docs/src/utils/common-utils/docs/usage.md",sourceDirName:"src/utils/common-utils/docs",slug:"/src/utils/common-utils/docs/usage",permalink:"/adb/docs/src/utils/common-utils/docs/usage",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/adb/docs/src/utils/common-utils/docs/setup"},next:{title:"Logger",permalink:"/adb/docs/src/utils/logger/readme"}},m=[{value:"Import",id:"import",children:[],level:2},{value:"Date",id:"date",children:[{value:"convertDateToString",id:"convertdatetostring",children:[],level:3},{value:"convertStringToDate",id:"convertstringtodate",children:[],level:3},{value:"dateDiff",id:"datediff",children:[],level:3},{value:"addDurationToDate",id:"adddurationtodate",children:[],level:3},{value:"setTimeToDate",id:"settimetodate",children:[],level:3},{value:"getTimeFromDate",id:"gettimefromdate",children:[],level:3},{value:"isSameDates",id:"issamedates",children:[],level:3},{value:"convertNestedStringToDate",id:"convertnestedstringtodate",children:[],level:3}],level:2},{value:"Lodash",id:"lodash",children:[{value:"merge",id:"merge",children:[],level:3},{value:"isEqual",id:"isequal",children:[],level:3}],level:2}],d={toc:m};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { commonUtils } from "../common-utils";\nimport { DateTypes } from "../common-utils.types";\n')),(0,r.kt)("h2",{id:"date"},"Date"),(0,r.kt)("h3",{id:"convertdatetostring"},"convertDateToString"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"\n const todayDateIndianStr = await commonUtils.DateCls.convertDateToString(new Date(), commonUtils.DATE_FORMATS.INDIAN);\n//Eg: todayDateIndianStr = 22/11/2021\n\n const todayDateISOStr = await commonUtils.DateCls.convertDateToString(new Date());\n//Eg: todayDateIndianStr = 2021-11-22T12:49:32.503Z (typical API or database format)\n")),(0,r.kt)("h3",{id:"convertstringtodate"},"convertStringToDate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'//Pass string & format\n const todayDateInst = await commonUtils.DateCls.convertStringToDate("22/11/2021", commonUtils.DATE_FORMATS.INDIAN);\n//Eg: todayDateInst is instance of Date\n\n//Pass ISO string (typical API or database format)\n const todayDateInst2 = await commonUtils.DateCls.convertStringToDate("2021-11-22T12:49:32.503Z");\n\n\n //Pass string & format\n const dateTimeStr = "22/11/2021 13:06:07";\n const dateTimeFormat = commonUtils.DATE_FORMATS.INDIAN + " " + commonUtils.TIME_FORMATS.HOUR_24;\n const todayDateInst3 = await commonUtils.DateCls.convertStringToDate(dateTimeStr, dateTimeFormat);\n')),(0,r.kt)("h3",{id:"datediff"},"dateDiff"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const minDate = new Date("2021-10-18");\nconst maxDate = new Date("2021-11-19");\n\n//difference in days\nconst checkValueDays = await commonUtils.DateCls.dateDiff(maxDate, minDate, commonUtils.DATE_TIME_UNITS.DAYS, true);\n\n//difference in months\nconst checkValueMonth = await commonUtils.DateCls.dateDiff(maxDate, minDate, commonUtils.DATE_TIME_UNITS.MONTHS, true);\n//difference in months with decimal\nconst checkValueMonth2 = await commonUtils.DateCls.dateDiff(maxDate, minDate, commonUtils.DATE_TIME_UNITS.MONTHS, false);\n')),(0,r.kt)("h3",{id:"adddurationtodate"},"addDurationToDate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const date = new Date("2021-10-18");\nconst dayDiff = 1;\nconst monthDiff = 1;\nconst hourDiff = 2;\n\nconst durationDaysObj: DateTypes.IMomentDuration = { days: dayDiff };\nconst durationMonthsObj: DateTypes.IMomentDuration = { months: monthDiff };\nconst durationMixedObj: DateTypes.IMomentDuration = { months: monthDiff, days: dayDiff, hours : hourDiff};\n\n//adding days to existing date\nconst newDate = await commonUtils.DateCls.addDurationToDate(date, durationDaysObj);\n\n//adding months to existing date\nconst newDate2 = await commonUtils.DateCls.addDurationToDate(date, durationMonthsObj);\n\n//adding multiple to existing date\nconst newDate3 = await commonUtils.DateCls.addDurationToDate(date, durationMixedObj);\n\n')),(0,r.kt)("h3",{id:"settimetodate"},"setTimeToDate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'\nconst date = new Date();\nconst timeStr = "13:06:07";\n\n//set time to existing date\nconst newDateIsoStr = await commonUtils.DateCls.setTimeToDate(date, timeStr, commonUtils.TIME_FORMATS.HOUR_24);\nconst newDate = new Date(newDateIsoStr);\n')),(0,r.kt)("h3",{id:"gettimefromdate"},"getTimeFromDate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"//get time from existing date\n const timeStr = await commonUtils.DateCls.getTimeFromDate(new Date(), commonUtils.TIME_FORMATS.HOUR_24);\n //timeStr = 18:54:55 (HH:mm:ss)\n")),(0,r.kt)("h3",{id:"issamedates"},"isSameDates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const isSame = await commonUtils.DateCls.isSameDates(new Date("1990-02-13"), new Date("1990-02-13"));\n')),(0,r.kt)("h3",{id:"convertnestedstringtodate"},"convertNestedStringToDate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Useful to convert front end API json dates to date objects before inserting in database")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const obj = {\n        name: "alex",\n        dob: "2021-11-22T11:40:35.477Z",\n        family: {\n            fatherDob: "1972-11-01",\n            motherDob: "1970-06-01",\n            others: {\n                location: "India",\n                brotherDob: "1991-09-02"\n\n            }\n        }\n    }\n\nconst checkObj = await commonUtils.DateCls.convertNestedStringToDate(obj);   \n/*\n checkObj = {\n      name: \'alex\',\n      dob: 2021-11-22T11:40:35.477Z, //date object\n      family: {\n        fatherDob: 1972-11-01T00:00:00.000Z,\n        motherDob: 1970-06-01T00:00:00.000Z,\n        others: { location: \'India\', brotherDob: 1991-09-02T00:00:00.000Z }\n      }\n    }\n*/ \n\n')),(0,r.kt)("h2",{id:"lodash"},"Lodash"),(0,r.kt)("h3",{id:"merge"},"merge"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"merge objects")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const item1 = {\n    name: "Alex",\n    age: 31,\n    hobbies: ["Singing songs", "Telling jokes"]\n}\nconst item2 = {\n    name: "bob",\n    cost: 3500\n}\n\nconst mergedItem = await commonUtils.LodashCls.merge(item1, item2);\n/*\nmergedItem = \n{\n    name: "bob",\n    age: 31,\n    hobbies: ["Singing songs", "Telling jokes"],\n    cost: 3500\n}\n*/\n\n')),(0,r.kt)("h3",{id:"isequal"},"isEqual"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Compare equality on nested objects, arrays, dates...etc")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const obj1 = {\n    name: "Alexa",\n    age: 31,\n    hobbies: ["Singing songs", "Telling jokes"],\n    school: {\n        name: "amazon",\n        score: 90\n    }\n}\nconst obj2 = {\n    name: "Alexa",\n    age: 31,\n    hobbies: ["Singing songs", "Telling jokes"],\n    school: {\n        name: "amazon",\n        score: 90\n    }\n}\n\nconst date1 = new Date("1990-02-13");\nconst date2 = new Date("1990-02-13");\n\nconst arr1 = [{\n    name: "Amazon",\n    letter: "A"\n}, {\n    name: "Berlin",\n    letter: "B"\n}, {\n    name: "Curry",\n    letter: "C"\n}];\n\nconst arr2 = [{\n    name: "Amazon",\n    letter: "A"\n}, {\n    name: "Berlin",\n    letter: "B"\n}, {\n    name: "Curry",\n    letter: "C"\n}];\n\nlet isPass = false;\n\nconst isBothEqual1 = await commonUtils.LodashCls.isEqual(obj1, obj2);\nconst isBothEqual2 = await commonUtils.LodashCls.isEqual(date1, date2);\nconst isBothEqual3 = await commonUtils.LodashCls.isEqual(arr1, arr2);\n')))}u.isMDXComponent=!0}}]);