"use strict";(self.webpackChunkdoc_generator=self.webpackChunkdoc_generator||[]).push([[2007],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var s=a.createContext({}),d=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=d(t.components);return a.createElement(s.Provider,{value:e},t.children)},g={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,s=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),p=d(n),m=l,c=p["".concat(s,".").concat(m)]||p[m]||g[m]||r;return n?a.createElement(c,o(o({ref:e},u),{},{components:n})):a.createElement(c,o({ref:e},u))}));function m(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:l,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3107:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),o=["components"],i={sidebar_position:2},s="Usage",d={unversionedId:"src/utils/logger/docs/usage",id:"src/utils/logger/docs/usage",isDocsHomePage:!1,title:"Usage",description:"Import",source:"@site/docs/src/utils/logger/docs/usage.md",sourceDirName:"src/utils/logger/docs",slug:"/src/utils/logger/docs/usage",permalink:"/adb/docs/src/utils/logger/docs/usage",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/adb/docs/src/utils/logger/docs/setup"},next:{title:"Misc",permalink:"/adb/docs/src/utils/logger/docs/misc"}},u=[{value:"Import",id:"import",children:[],level:2},{value:"Pass config",id:"pass-config",children:[{value:"simple db log example",id:"simple-db-log-example",children:[],level:3},{value:"full log example",id:"full-log-example",children:[],level:3},{value:"Config options",id:"config-options",children:[],level:3}],level:2},{value:"Get Instance",id:"get-instance",children:[],level:2},{value:"Use methods",id:"use-methods",children:[{value:"debug/ info/ warn",id:"debug-info-warn",children:[],level:3},{value:"error",id:"error",children:[],level:3}],level:2}],g={toc:u};function p(t){var e=t.components,n=(0,l.Z)(t,o);return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { v4 as uuidv4 } from 'uuid';\n\nimport {\n  setLogger,\n  getLogger,\n  LoggerCls,\n  LOG_LEVEL_NAME,\n  ERROR_SEVERITY_LEVEL\n} from \"path/to/logger/logger\";\n")),(0,r.kt)("h2",{id:"pass-config"},"Pass config"),(0,r.kt)("h3",{id:"simple-db-log-example"},"simple db log example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'//syntax\nsetLogger(options);\n\nsetLogger({\n//by default console & file logs are enabled, so enable db logs    \nenableDatabaseLog: true,\ndatabaseOptions: {\n    connectionURL: "{DB_CONNECTION_URL}",\n    collectionName: "Logs",\n},\n\napplicationName: "{APPLICATION_NAME}",\nlogFolderPathPrefix:  "./logs/",\n});\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Collection is auto created but db must exists!")),(0,r.kt)("h3",{id:"full-log-example"},"full log example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'//example\nsetLogger({\n\n//console\nenableConsoleLog: true,\nconsoleLogLevel: LOG_LEVEL_NAME.INFO,\n\n//file\nenableFileLog: true,\nfileLogLevel: LOG_LEVEL_NAME.INFO,\n\n//rotate file log\nenableRotateFileLog: true,\nrotateFileLogLevel: LOG_LEVEL_NAME.INFO,\nrotateFileOptions: {\n    maxNumberOfFilesInDays: 60 \n},\n\n//database log\nenableDatabaseLog: true,\ndatabaseLogLevel: LOG_LEVEL_NAME.ERROR,\ndatabaseOptions: {\n    connectionURL: "{DB_CONNECTION_URL}",\n    collectionName: "Logs",\n    maxNumberOfDocuments: 100000,\n    maxSizeOfCollectionInBytes: (1024 * 1024 * 50), //50 MB\n},\n\n//aws cloudwatch\nenableAwsCloudWatchLog: true,\nawsCloudWatchLogLevel: LOG_LEVEL_NAME.INFO,\nawsConfig: {\n    accessKeyId: "{AWS_ACCESS_KEY_ID}",\n    secretAccessKey: "{AWS_SECRET_KEY}",\n    region: "{AWS_REGION}",\n}\nawsCloudWatchOptions: {\n    maxNumberOfDays: 60,\n    name: "",\n    groupName: "",\n    streamName: "",\n},\n\n//common\napplicationName: APPLICATION_NAME,\nlogFolderPathPrefix:  "./logs/" ,\n});\n')),(0,r.kt)("h3",{id:"config-options"},"Config options"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LOG_LEVEL_ORDER"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ERROR"),(0,r.kt)("li",{parentName:"ul"},"WARN"),(0,r.kt)("li",{parentName:"ul"},"INFO"),(0,r.kt)("li",{parentName:"ul"},"DEBUG")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Param"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[enableConsoleLog]"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true to enable console log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[consoleLogLevel]"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME.INFO"),(0,r.kt)("td",{parentName:"tr",align:null},"to print LOG_LEVEL_ORDER.INFO and above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[enableFileLog]"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true to enable file log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[fileLogLevel]"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME.INFO"),(0,r.kt)("td",{parentName:"tr",align:null},"to print LOG_LEVEL_ORDER.INFO and above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[enableRotateFileLog]"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true to enable rotate file log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[rotateFileLogLevel]"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME.INFO"),(0,r.kt)("td",{parentName:"tr",align:null},"to print LOG_LEVEL_ORDER.INFO and above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[rotateFileOptions.maxNumberOfFilesInDays]"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"90"),(0,r.kt)("td",{parentName:"tr",align:null},"max no of days to keep log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[enableDatabaseLog]"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true to enable database log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[databaseLogLevel]"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME.ERROR"),(0,r.kt)("td",{parentName:"tr",align:null},"to print LOG_LEVEL_ORDER.ERROR and above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[databaseOptions.connectionURL]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"db connection to store logs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[databaseOptions.collectionName]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"db collection name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[databaseOptions.maxNumberOfDocuments]"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"max number of documents in capped collection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[databaseOptions.maxSizeOfCollectionInBytes]"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"max size of capped collection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[enableAwsCloudWatchLog]"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"true to enable AWS cloud watch log")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsCloudWatchLogLevel]"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"LOG_LEVEL_NAME.INFO"),(0,r.kt)("td",{parentName:"tr",align:null},"to print LOG_LEVEL_ORDER.INFO and above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsConfig.accessKeyId]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"aws accessKeyId")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsConfig.secretAccessKey]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"aws secretAccessKey")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsConfig.region]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"aws region")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsCloudWatchOptions.maxNumberOfDays]"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"90"),(0,r.kt)("td",{parentName:"tr",align:null},"max no of days to keep logs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsCloudWatchOptions.name]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"winston-aws-cloudwatch"'),(0,r.kt)("td",{parentName:"tr",align:null},"cloud watch name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsCloudWatchOptions.groupName]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"winston-log-group"'),(0,r.kt)("td",{parentName:"tr",align:null},"cloud watch logGroupName")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[awsCloudWatchOptions.streamName]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"winston-log-stream"'),(0,r.kt)("td",{parentName:"tr",align:null},"cloud watch logStreamName")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[applicationName]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'""'),(0,r.kt)("td",{parentName:"tr",align:null},"application name used in meta data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[logFolderPathPrefix]"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"./logs/"'),(0,r.kt)("td",{parentName:"tr",align:null},"directory path for file and rotate files")))),(0,r.kt)("h2",{id:"get-instance"},"Get Instance"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const loggerInst: LoggerCls = getLogger();\n")),(0,r.kt)("h2",{id:"use-methods"},"Use methods"),(0,r.kt)("h3",{id:"debug-info-warn"},"debug/ info/ warn"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'//syntax\nloggerInst.debug(message, details, requestId)\nloggerInst.info(message, details, requestId)\nloggerInst.warn(message, details, requestId)\n//Note: only message param is mandatory\n\n\n//example\nconst logDetails = { //any data to log\n  me:"developer", \n  you:"developer"\n}\n/*\ngenerate requestId per one request in middle ware\n(optional) unique id for API request so that all logs per API request can be easily tracked\n*/\nconst requestId =  uuidv4(); // \u21e8 \'9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d\'\n\nloggerInst.debug("login api", logDetails, requestId)\n')),(0,r.kt)("h3",{id:"error"},"error"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'//syntax\nloggerInst.error(message, details, requestId, severity)\n//Note: only message param is mandatory\n\n//example\ntry{\n\n}\ncatch(err){\n  loggerInst.error("payment api error", err, requestId, ERROR_SEVERITY_LEVEL.HIGH);\n}\n\n')))}p.isMDXComponent=!0}}]);