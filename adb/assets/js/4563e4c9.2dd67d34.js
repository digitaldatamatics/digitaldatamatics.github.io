"use strict";(self.webpackChunkdoc_generator=self.webpackChunkdoc_generator||[]).push([[5915],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(n),d=r,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var i=2;i<s;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2923:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),o=["components"],l={sidebar_position:9},c="Schema to TS",i={unversionedId:"docs/schema-to-ts",id:"docs/schema-to-ts",isDocsHomePage:!1,title:"Schema to TS",description:"- Converting JSON schema to typescript",source:"@site/docs/docs/schema-to-ts.md",sourceDirName:"docs",slug:"/docs/schema-to-ts",permalink:"/adb/docs/docs/schema-to-ts",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Deno",permalink:"/adb/docs/docs/deno"},next:{title:"validations",permalink:"/adb/docs/docs/validations"}},p=[{value:"Install dependencies",id:"install-dependencies",children:[],level:2},{value:"Code files",id:"code-files",children:[],level:2},{value:"Package script",id:"package-script",children:[],level:2},{value:"Usage",id:"usage",children:[],level:2},{value:"Others",id:"others",children:[{value:"enums",id:"enums",children:[],level:3},{value:"Relative paths in JSON schema",id:"relative-paths-in-json-schema",children:[],level:3},{value:"Generate fake or sample json data",id:"generate-fake-or-sample-json-data",children:[],level:3}],level:2}],m={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"schema-to-ts"},"Schema to TS"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Converting JSON schema to typescript")),(0,s.kt)("h2",{id:"install-dependencies"},"Install dependencies"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save-dev glob cpy chokidar esm\nnpm install --save-dev json-schema-to-typescript\nnpm install --save-dev @types/json-schema # for types like JSONSchema4 used in mongodb validations\n")),(0,s.kt)("h2",{id:"code-files"},"Code files"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"build-scripts/schema.js"),(0,s.kt)("li",{parentName:"ul"},"build-scripts/watch-schema.js")),(0,s.kt)("h2",{id:"package-script"},"Package script"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Following scripts are added in package.json")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "scripts":{\n       "schema": "node -r esm build-scripts/schema.js",\n       "watch-schema": "node -r esm build-scripts/watch-schema.js",\n    }\n}\n')),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"# to convert all schemas to typescript types\nnpm run schema\n\n# to observe for schema changes runtime & convert to typescript types (development mode)\nnpm run watch-schema\n")),(0,s.kt)("h2",{id:"others"},"Others"),(0,s.kt)("h3",{id:"enums"},"enums"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/bcherny/json-schema-to-typescript/issues/200"},"https://github.com/bcherny/json-schema-to-typescript/issues/200")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/bcherny/json-schema-to-typescript/pull/405"},"https://github.com/bcherny/json-schema-to-typescript/pull/405"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'//input\n{\n    //values\n    "enum": [\n            "pass",\n            "fail"\n        ],\n     //enum variable name   \n    "title": "GRADE_STATUSES",\n\n    //keys\n    "tsEnumNames": [\n        "PASS",\n        "FAIL"\n    ],\n}\n\n//output\nexport const enum GRADE_STATUSES {\n  PASS = "pass",\n  FAIL = "fail"\n}\n')),(0,s.kt)("h3",{id:"relative-paths-in-json-schema"},"Relative paths in JSON schema"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"by default paths must be relative from current working directory",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/json-schema-ref-parser"},"Internal lib docs"))))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'//example\n{\n "$ref": "src/models/json-schemas/common-schema.json"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'but for files in "src/models/json-schemas/", cwd (current working directory) is changed to  ',(0,s.kt)("strong",{parentName:"li"},'"src/models/json-schemas"'),"  in  ",(0,s.kt)("strong",{parentName:"li"},'"build-scripts/schema.js"'),"  to use relative paths accordingly.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Why ? To support VS code intellisense for json-samples folder ")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "$ref": "./common-schema.json"\n}\n')),(0,s.kt)("h3",{id:"generate-fake-or-sample-json-data"},"Generate fake or sample json data"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("a",{parentName:"p",href:"https://github.com/json-schema-faker/json-schema-faker/tree/0bff5c1f8aa1e314d348c23010bf078c4eb885eb/docs"},"lib 1")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/oprogramador/json-schema-faker-cli"},"lib 1 cli")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Lib 1 supports ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/marak/Faker.js/"},"faker.js")," also in options to generate dummy data"))))}u.isMDXComponent=!0}}]);